package edu.harvard.mcz.imagecapture.entity


import edu.harvard.mcz.imagecapture.entity.Specimen
import edu.harvard.mcz.imagecapture.entity.fixed.NatureOfId
import java.io.Serializable

// Generated Jan 23, 2009 8:12:35 AM by Hibernate Tools 3.2.2.GA
/**
 * Determination generated by hbm2java
 */
class Determination : Serializable, Cloneable {
    var determinationId: Long? = null
    private var specimen: Specimen? = null
    var genus: String? = null
    var specificEpithet: String? = null
    var subspecificEpithet: String? = null
    var infraspecificEpithet: String? = null
    var infraspecificRank: String? = null
    var authorship: String? = null
    var unNamedForm: String? = null
    var identifiedBy: String? = null
    var typeStatus: String?
    /**
     * @return the speciesNumber
     */
    /**
     * @param speciesNumber the speciesNumber to set
     */
    var speciesNumber: String? = null
    /**
     * @return the verbatimText
     */
    /**
     * @param verbatimText the verbatimText to set
     */
    var verbatimText: String? = null
    /**
     * @return the natureOfId
     */
    /**
     * @param natureOfId the natureOfId to set
     */
    var natureOfId: String?
    /**
     * @return the dateIdentified
     */
    /**
     * @param dateIdentified the dateIdentified to set
     */
    var dateIdentified: String? = null
    /**
     * @return the identificationRemarks
     */
    /**
     * @param identificationRemarks the remarks to set
     */
    var remarks: String? = null

    constructor() {
        typeStatus = Specimen.Companion.STATUS_NOT_A_TYPE
        natureOfId = NatureOfId.EXPERT_ID
    }

    constructor(specimen: Specimen?) {
        this.specimen = specimen
        typeStatus = Specimen.Companion.STATUS_NOT_A_TYPE
        natureOfId = NatureOfId.EXPERT_ID
    }

    constructor(specimen: Specimen?, genus: String?,
                specificEpithet: String?, subspecificEpithet: String?,
                infraspecificEpithet: String?, infraspecificRank: String?,
                authorship: String?, unNamedForm: String?,
                identifiedBy: String?, typeStatus: String?,
                speciesNumber: String?, natureOfId: String?) {
        this.specimen = specimen
        this.genus = genus
        this.specificEpithet = specificEpithet
        this.subspecificEpithet = subspecificEpithet
        this.infraspecificEpithet = infraspecificEpithet
        this.infraspecificRank = infraspecificRank
        this.authorship = authorship
        this.unNamedForm = unNamedForm
        this.identifiedBy = identifiedBy
        this.typeStatus = typeStatus
        this.speciesNumber = speciesNumber
        this.natureOfId = natureOfId
    }

    fun getSpecimen(): Specimen? {
        return specimen
    }

    fun setSpecimen(specimen: Specimen?) {
        this.specimen = specimen
    }

    public override fun clone(): Determination {
        val newDet = Determination(
                specimen, genus,
                specificEpithet, subspecificEpithet,
                infraspecificEpithet, infraspecificRank,
                authorship, unNamedForm, identifiedBy, typeStatus, speciesNumber, natureOfId
        )
        newDet.verbatimText = verbatimText
        newDet.remarks = remarks
        newDet.dateIdentified = dateIdentified
        return newDet
    }

    companion object {
        private const val serialVersionUID = 1284175685743514257L
    }
}
